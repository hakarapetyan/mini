static void dups(t_shell *shell)
{
	if (shell->pipe_index == 0)
	{
		if (dup2(shell->fd[0][1], 1) == -1)
		{
			close_pipes(shell);
			printf("pipe dup failed\n");
			clean_shell_exit(shell, 1);
		}
	}
	else if (shell->pipe_index == shell->pipe_count)
	{
		if (dup2(shell->fd[shell->pipe_index - 1][0], 0) == -1)
		{
			close_pipes(shell);
			printf("pipe dup failed\n");
			clean_shell_exit(shell, 1);
		}
	}
	else
	{
		if (dup2(shell->fd[shell->pipe_index - 1][0], 0) == -1)
		{
			close_pipes(shell);
			printf("pipe dup failed\n");
			clean_shell_exit(shell, 1);
		}
		if (dup2(shell->fd[shell->pipe_index][1], 1) == - 1)
		{
			close_pipes(shell);
			printf("pipe dup failed\n");
			clean_shell_exit(shell, 1);
		}
	}
	close_pipes(shell);
}
static int	execution(t_shell *shell)
{
	t_commands *cmd;
	int i = 0;

	cmd = shell -> command;
	shell -> pid = malloc(sizeof(int) * (shell -> pipe_count + 1));
		//if (!shell -> pid) freee
	create_pipes(shell);
	while (shell -> pipe_index <= shell -> pipe_count)
	{
		shell -> pid[i] = fork();
		if (shell -> pid[i] == 0)
		{
			dups(shell);
			prepare_redirections(shell);
			execute_command(shell, cmd);
		}
		i++;
		shell -> pipe_index++;
		cmd = cmd -> next;
	}
	close_pipes(shell);
	int k = 0;
	int st;
	while (k < shell->command_count)
	{
		wait_and_status(shell->pid[k], &st);
		k++;
	}
	return ( 0);
}